using System;
using System.Collections.Generic;
using BansheeGz.BGDatabase;
using Alias_rifegrt_PlayerState = Game.Data.DB_PlayerState;
using Alias_rifegrt_Character = Game.Data.DB_Character;

//=============================================================
//||                   Generated by BansheeGz Code Generator ||
//=============================================================

namespace Game.Data
{
	#pragma warning disable 414

	//=============================================================
	//||                   Generated by BansheeGz Code Generator ||
	//=============================================================

	public partial class DB_Weapon : BGEntity
	{

		//=============================================================
		//||                   Generated by BansheeGz Code Generator ||
		//=============================================================

		public class Factory : BGEntity.EntityFactory
		{
			public BGEntity NewEntity(BGMetaEntity meta)
			{
				return new DB_Weapon(meta);
			}
			public BGEntity NewEntity(BGMetaEntity meta, BGId id)
			{
				return new DB_Weapon(meta, id);
			}
		}
		private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
		public static BansheeGz.BGDatabase.BGMetaRow MetaDefault
		{
			get
			{
				if(_metaDefault==null || _metaDefault.IsDeleted) _metaDefault=BGRepo.I.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(4711525026854153091UL,13230613608721889424UL));
				return _metaDefault;
			}
		}
		public static BansheeGz.BGDatabase.BGRepoEvents Events
		{
			get
			{
				return BGRepo.I.Events;
			}
		}
		private static readonly List<BGEntity> _find_Entities_Result = new List<BGEntity>();
		public static int CountEntities
		{
			get
			{
				return MetaDefault.CountEntities;
			}
		}
		public System.String f_name
		{
			get
			{
				return _f_name[Index];
			}
			set
			{
				_f_name[Index] = value;
			}
		}
		public System.Int32 f_Damage
		{
			get
			{
				return _f_Damage[Index];
			}
			set
			{
				_f_Damage[Index] = value;
			}
		}
		public System.Single f_Range
		{
			get
			{
				return _f_Range[Index];
			}
			set
			{
				_f_Range[Index] = value;
			}
		}
		public System.Single f_Cooldown
		{
			get
			{
				return _f_Cooldown[Index];
			}
			set
			{
				_f_Cooldown[Index] = value;
			}
		}
		public System.Int32 f_MaxAmmo
		{
			get
			{
				return _f_MaxAmmo[Index];
			}
			set
			{
				_f_MaxAmmo[Index] = value;
			}
		}
		private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
		public static BansheeGz.BGDatabase.BGFieldEntityName _f_name
		{
			get
			{
				if(_ufle12jhs77_f_name==null || _ufle12jhs77_f_name.IsDeleted) _ufle12jhs77_f_name=(BansheeGz.BGDatabase.BGFieldEntityName) MetaDefault.GetField(new BGId(5688208232134784918UL,5122132808218224288UL));
				return _ufle12jhs77_f_name;
			}
		}
		private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_Damage;
		public static BansheeGz.BGDatabase.BGFieldInt _f_Damage
		{
			get
			{
				if(_ufle12jhs77_f_Damage==null || _ufle12jhs77_f_Damage.IsDeleted) _ufle12jhs77_f_Damage=(BansheeGz.BGDatabase.BGFieldInt) MetaDefault.GetField(new BGId(5369740449094141563UL,12749312661224286870UL));
				return _ufle12jhs77_f_Damage;
			}
		}
		private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_f_Range;
		public static BansheeGz.BGDatabase.BGFieldFloat _f_Range
		{
			get
			{
				if(_ufle12jhs77_f_Range==null || _ufle12jhs77_f_Range.IsDeleted) _ufle12jhs77_f_Range=(BansheeGz.BGDatabase.BGFieldFloat) MetaDefault.GetField(new BGId(5037380097773384370UL,11291849711367015327UL));
				return _ufle12jhs77_f_Range;
			}
		}
		private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_f_Cooldown;
		public static BansheeGz.BGDatabase.BGFieldFloat _f_Cooldown
		{
			get
			{
				if(_ufle12jhs77_f_Cooldown==null || _ufle12jhs77_f_Cooldown.IsDeleted) _ufle12jhs77_f_Cooldown=(BansheeGz.BGDatabase.BGFieldFloat) MetaDefault.GetField(new BGId(4634859534204638149UL,6637155625855446686UL));
				return _ufle12jhs77_f_Cooldown;
			}
		}
		private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_MaxAmmo;
		public static BansheeGz.BGDatabase.BGFieldInt _f_MaxAmmo
		{
			get
			{
				if(_ufle12jhs77_f_MaxAmmo==null || _ufle12jhs77_f_MaxAmmo.IsDeleted) _ufle12jhs77_f_MaxAmmo=(BansheeGz.BGDatabase.BGFieldInt) MetaDefault.GetField(new BGId(5474773311939377067UL,7558555848424621997UL));
				return _ufle12jhs77_f_MaxAmmo;
			}
		}
		private static readonly List<BGEntity> _tugjbyuhfv_reusableList = new List<BGEntity>();
		public List<DB_PlayerState> RelatedPlayerStateListUsingWeaponRelation
		{
			get
			{
				var _private_related_list = Alias_rifegrt_PlayerState._f_Weapon.GetRelatedIn(Id, _tugjbyuhfv_reusableList);
				if (_private_related_list.Count == 0) return null;
				var _private_result_list = new List<DB_PlayerState>(_private_related_list.Count);
				for (var i = 0; i < _private_related_list.Count; i++) _private_result_list.Add((DB_PlayerState) _private_related_list[i]);
				_tugjbyuhfv_reusableList.Clear();
				return _private_result_list;
			}
		}
		public List<DB_Character> RelatedCharacterListUsingWeaponRelation
		{
			get
			{
				var _private_related_list = Alias_rifegrt_Character._f_Weapon.GetRelatedIn(Id, _tugjbyuhfv_reusableList);
				if (_private_related_list.Count == 0) return null;
				var _private_result_list = new List<DB_Character>(_private_related_list.Count);
				for (var i = 0; i < _private_related_list.Count; i++) _private_result_list.Add((DB_Character) _private_related_list[i]);
				_tugjbyuhfv_reusableList.Clear();
				return _private_result_list;
			}
		}
		private static readonly DB_Weapon.Factory _factory0_PFS = new DB_Weapon.Factory();
		private static readonly DB_PlayerState.Factory _factory1_PFS = new DB_PlayerState.Factory();
		private static readonly DB_Character.Factory _factory2_PFS = new DB_Character.Factory();
		private DB_Weapon() : base(MetaDefault)
		{
		}
		private DB_Weapon(BGId id) : base(MetaDefault, id)
		{
		}
		private DB_Weapon(BGMetaEntity meta) : base(meta)
		{
		}
		private DB_Weapon(BGMetaEntity meta, BGId id) : base(meta, id)
		{
		}
		public static DB_Weapon FindEntity(Predicate<DB_Weapon> filter)
		{
			return MetaDefault.FindEntity(entity => filter==null || filter((DB_Weapon) entity)) as DB_Weapon;
		}
		public static List<DB_Weapon> FindEntities(Predicate<DB_Weapon> filter, List<DB_Weapon> result=null, Comparison<DB_Weapon> sort=null)
		{
			result = result ?? new List<DB_Weapon>();
			_find_Entities_Result.Clear();
			MetaDefault.FindEntities(filter == null ? (Predicate<BGEntity>) null: e => filter((DB_Weapon) e), _find_Entities_Result, sort == null ? (Comparison<BGEntity>) null : (e1, e2) => sort((DB_Weapon) e1, (DB_Weapon) e2));
			if (_find_Entities_Result.Count != 0)
			{
				for (var i = 0; i < _find_Entities_Result.Count; i++) result.Add((DB_Weapon) _find_Entities_Result[i]);
				_find_Entities_Result.Clear();
			}
			return result;
		}
		public static void ForEachEntity(Action<DB_Weapon> action, Predicate<DB_Weapon> filter=null, Comparison<DB_Weapon> sort=null)
		{
			MetaDefault.ForEachEntity(entity => action((DB_Weapon) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((DB_Weapon) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((DB_Weapon)e1,(DB_Weapon)e2));
		}
		public static DB_Weapon GetEntity(BGId entityId)
		{
			return (DB_Weapon) MetaDefault.GetEntity(entityId);
		}
		public static DB_Weapon GetEntity(int index)
		{
			return (DB_Weapon) MetaDefault[index];
		}
		public static DB_Weapon GetEntity(string entityName)
		{
			return (DB_Weapon) MetaDefault.GetEntity(entityName);
		}
		public static DB_Weapon NewEntity()
		{
			return (DB_Weapon) MetaDefault.NewEntity();
		}
	}

	//=============================================================
	//||                   Generated by BansheeGz Code Generator ||
	//=============================================================

	public partial class DB_PlayerState : BGEntity
	{

		//=============================================================
		//||                   Generated by BansheeGz Code Generator ||
		//=============================================================

		public class Factory : BGEntity.EntityFactory
		{
			public BGEntity NewEntity(BGMetaEntity meta)
			{
				return new DB_PlayerState(meta);
			}
			public BGEntity NewEntity(BGMetaEntity meta, BGId id)
			{
				return new DB_PlayerState(meta, id);
			}
		}
		private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
		public static BansheeGz.BGDatabase.BGMetaRow MetaDefault
		{
			get
			{
				if(_metaDefault==null || _metaDefault.IsDeleted) _metaDefault=BGRepo.I.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5003989796350306623UL,5931806590709155465UL));
				return _metaDefault;
			}
		}
		public static BansheeGz.BGDatabase.BGRepoEvents Events
		{
			get
			{
				return BGRepo.I.Events;
			}
		}
		private static readonly List<BGEntity> _find_Entities_Result = new List<BGEntity>();
		public static int CountEntities
		{
			get
			{
				return MetaDefault.CountEntities;
			}
		}
		public System.String f_name
		{
			get
			{
				return _f_name[Index];
			}
			set
			{
				_f_name[Index] = value;
			}
		}
		public DB_Weapon f_Weapon
		{
			get
			{
				return (DB_Weapon) _f_Weapon[Index];
			}
			set
			{
				_f_Weapon[Index] = value;
			}
		}
		private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
		public static BansheeGz.BGDatabase.BGFieldEntityName _f_name
		{
			get
			{
				if(_ufle12jhs77_f_name==null || _ufle12jhs77_f_name.IsDeleted) _ufle12jhs77_f_name=(BansheeGz.BGDatabase.BGFieldEntityName) MetaDefault.GetField(new BGId(4827948349374461153UL,17513311685605638053UL));
				return _ufle12jhs77_f_name;
			}
		}
		private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_Weapon;
		public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_Weapon
		{
			get
			{
				if(_ufle12jhs77_f_Weapon==null || _ufle12jhs77_f_Weapon.IsDeleted) _ufle12jhs77_f_Weapon=(BansheeGz.BGDatabase.BGFieldRelationSingle) MetaDefault.GetField(new BGId(4636425295844198584UL,12088186648490063800UL));
				return _ufle12jhs77_f_Weapon;
			}
		}
		private static readonly DB_Weapon.Factory _factory0_PFS = new DB_Weapon.Factory();
		private static readonly DB_PlayerState.Factory _factory1_PFS = new DB_PlayerState.Factory();
		private static readonly DB_Character.Factory _factory2_PFS = new DB_Character.Factory();
		private DB_PlayerState() : base(MetaDefault)
		{
		}
		private DB_PlayerState(BGId id) : base(MetaDefault, id)
		{
		}
		private DB_PlayerState(BGMetaEntity meta) : base(meta)
		{
		}
		private DB_PlayerState(BGMetaEntity meta, BGId id) : base(meta, id)
		{
		}
		public static DB_PlayerState FindEntity(Predicate<DB_PlayerState> filter)
		{
			return MetaDefault.FindEntity(entity => filter==null || filter((DB_PlayerState) entity)) as DB_PlayerState;
		}
		public static List<DB_PlayerState> FindEntities(Predicate<DB_PlayerState> filter, List<DB_PlayerState> result=null, Comparison<DB_PlayerState> sort=null)
		{
			result = result ?? new List<DB_PlayerState>();
			_find_Entities_Result.Clear();
			MetaDefault.FindEntities(filter == null ? (Predicate<BGEntity>) null: e => filter((DB_PlayerState) e), _find_Entities_Result, sort == null ? (Comparison<BGEntity>) null : (e1, e2) => sort((DB_PlayerState) e1, (DB_PlayerState) e2));
			if (_find_Entities_Result.Count != 0)
			{
				for (var i = 0; i < _find_Entities_Result.Count; i++) result.Add((DB_PlayerState) _find_Entities_Result[i]);
				_find_Entities_Result.Clear();
			}
			return result;
		}
		public static void ForEachEntity(Action<DB_PlayerState> action, Predicate<DB_PlayerState> filter=null, Comparison<DB_PlayerState> sort=null)
		{
			MetaDefault.ForEachEntity(entity => action((DB_PlayerState) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((DB_PlayerState) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((DB_PlayerState)e1,(DB_PlayerState)e2));
		}
		public static DB_PlayerState GetEntity(BGId entityId)
		{
			return (DB_PlayerState) MetaDefault.GetEntity(entityId);
		}
		public static DB_PlayerState GetEntity(int index)
		{
			return (DB_PlayerState) MetaDefault[index];
		}
		public static DB_PlayerState GetEntity(string entityName)
		{
			return (DB_PlayerState) MetaDefault.GetEntity(entityName);
		}
		public static DB_PlayerState NewEntity()
		{
			return (DB_PlayerState) MetaDefault.NewEntity();
		}
	}

	//=============================================================
	//||                   Generated by BansheeGz Code Generator ||
	//=============================================================

	public partial class DB_Character : BGEntity
	{

		//=============================================================
		//||                   Generated by BansheeGz Code Generator ||
		//=============================================================

		public class Factory : BGEntity.EntityFactory
		{
			public BGEntity NewEntity(BGMetaEntity meta)
			{
				return new DB_Character(meta);
			}
			public BGEntity NewEntity(BGMetaEntity meta, BGId id)
			{
				return new DB_Character(meta, id);
			}
		}
		private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
		public static BansheeGz.BGDatabase.BGMetaRow MetaDefault
		{
			get
			{
				if(_metaDefault==null || _metaDefault.IsDeleted) _metaDefault=BGRepo.I.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5477263033828971831UL,429872056951427770UL));
				return _metaDefault;
			}
		}
		public static BansheeGz.BGDatabase.BGRepoEvents Events
		{
			get
			{
				return BGRepo.I.Events;
			}
		}
		private static readonly List<BGEntity> _find_Entities_Result = new List<BGEntity>();
		public static int CountEntities
		{
			get
			{
				return MetaDefault.CountEntities;
			}
		}
		public System.String f_name
		{
			get
			{
				return _f_name[Index];
			}
			set
			{
				_f_name[Index] = value;
			}
		}
		public DB_Weapon f_Weapon
		{
			get
			{
				return (DB_Weapon) _f_Weapon[Index];
			}
			set
			{
				_f_Weapon[Index] = value;
			}
		}
		private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
		public static BansheeGz.BGDatabase.BGFieldEntityName _f_name
		{
			get
			{
				if(_ufle12jhs77_f_name==null || _ufle12jhs77_f_name.IsDeleted) _ufle12jhs77_f_name=(BansheeGz.BGDatabase.BGFieldEntityName) MetaDefault.GetField(new BGId(5015547621454971548UL,1233630578420779691UL));
				return _ufle12jhs77_f_name;
			}
		}
		private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_Weapon;
		public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_Weapon
		{
			get
			{
				if(_ufle12jhs77_f_Weapon==null || _ufle12jhs77_f_Weapon.IsDeleted) _ufle12jhs77_f_Weapon=(BansheeGz.BGDatabase.BGFieldRelationSingle) MetaDefault.GetField(new BGId(5242210471904474561UL,14779262141376716733UL));
				return _ufle12jhs77_f_Weapon;
			}
		}
		private static readonly DB_Weapon.Factory _factory0_PFS = new DB_Weapon.Factory();
		private static readonly DB_PlayerState.Factory _factory1_PFS = new DB_PlayerState.Factory();
		private static readonly DB_Character.Factory _factory2_PFS = new DB_Character.Factory();
		private DB_Character() : base(MetaDefault)
		{
		}
		private DB_Character(BGId id) : base(MetaDefault, id)
		{
		}
		private DB_Character(BGMetaEntity meta) : base(meta)
		{
		}
		private DB_Character(BGMetaEntity meta, BGId id) : base(meta, id)
		{
		}
		public static DB_Character FindEntity(Predicate<DB_Character> filter)
		{
			return MetaDefault.FindEntity(entity => filter==null || filter((DB_Character) entity)) as DB_Character;
		}
		public static List<DB_Character> FindEntities(Predicate<DB_Character> filter, List<DB_Character> result=null, Comparison<DB_Character> sort=null)
		{
			result = result ?? new List<DB_Character>();
			_find_Entities_Result.Clear();
			MetaDefault.FindEntities(filter == null ? (Predicate<BGEntity>) null: e => filter((DB_Character) e), _find_Entities_Result, sort == null ? (Comparison<BGEntity>) null : (e1, e2) => sort((DB_Character) e1, (DB_Character) e2));
			if (_find_Entities_Result.Count != 0)
			{
				for (var i = 0; i < _find_Entities_Result.Count; i++) result.Add((DB_Character) _find_Entities_Result[i]);
				_find_Entities_Result.Clear();
			}
			return result;
		}
		public static void ForEachEntity(Action<DB_Character> action, Predicate<DB_Character> filter=null, Comparison<DB_Character> sort=null)
		{
			MetaDefault.ForEachEntity(entity => action((DB_Character) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((DB_Character) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((DB_Character)e1,(DB_Character)e2));
		}
		public static DB_Character GetEntity(BGId entityId)
		{
			return (DB_Character) MetaDefault.GetEntity(entityId);
		}
		public static DB_Character GetEntity(int index)
		{
			return (DB_Character) MetaDefault[index];
		}
		public static DB_Character GetEntity(string entityName)
		{
			return (DB_Character) MetaDefault.GetEntity(entityName);
		}
		public static DB_Character NewEntity()
		{
			return (DB_Character) MetaDefault.NewEntity();
		}
	}
	#pragma warning restore 414
}
