using System;
using System.Collections.Generic;
using UnityEngine;
using BansheeGz.BGDatabase;
using Alias_rifegrt_PlayerState = Game.Data.DB_PlayerState;
using Alias_rifegrt_Character = Game.Data.DB_Character;

//=============================================================
//||                   Generated by BansheeGz Code Generator ||
//=============================================================

namespace Game.Data.Connectors
{
	[AddComponentMenu("BansheeGz/Generated/DBC_Weapon")]
	public partial class DBC_Weapon : BGEntityGo
	{
		public override BGMetaEntity MetaConstraint
		{
			get
			{
				return MetaDefault;
			}
		}
		private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
		public static BansheeGz.BGDatabase.BGMetaRow MetaDefault
		{
			get
			{
				if(_metaDefault==null || _metaDefault.IsDeleted) _metaDefault=BGRepo.I.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(4711525026854153091UL,13230613608721889424UL));
				return _metaDefault;
			}
		}
		public static BansheeGz.BGDatabase.BGRepoEvents Events
		{
			get
			{
				return BGRepo.I.Events;
			}
		}
		public new System.String name
		{
			get
			{
				return _name[Entity.Index];
			}
			set
			{
				_name[Entity.Index] = value;
			}
		}
		public System.Int32 Damage
		{
			get
			{
				return _Damage[Entity.Index];
			}
			set
			{
				_Damage[Entity.Index] = value;
			}
		}
		public System.Single Range
		{
			get
			{
				return _Range[Entity.Index];
			}
			set
			{
				_Range[Entity.Index] = value;
			}
		}
		public System.Single Cooldown
		{
			get
			{
				return _Cooldown[Entity.Index];
			}
			set
			{
				_Cooldown[Entity.Index] = value;
			}
		}
		public System.Int32 MaxAmmo
		{
			get
			{
				return _MaxAmmo[Entity.Index];
			}
			set
			{
				_MaxAmmo[Entity.Index] = value;
			}
		}
		private static BansheeGz.BGDatabase.BGFieldEntityName __name;
		public static BansheeGz.BGDatabase.BGFieldEntityName _name
		{
			get
			{
				if(__name==null || __name.IsDeleted) __name=(BansheeGz.BGDatabase.BGFieldEntityName) MetaDefault.GetField(new BGId(5688208232134784918UL,5122132808218224288UL));
				return __name;
			}
		}
		private static BansheeGz.BGDatabase.BGFieldInt __Damage;
		public static BansheeGz.BGDatabase.BGFieldInt _Damage
		{
			get
			{
				if(__Damage==null || __Damage.IsDeleted) __Damage=(BansheeGz.BGDatabase.BGFieldInt) MetaDefault.GetField(new BGId(5369740449094141563UL,12749312661224286870UL));
				return __Damage;
			}
		}
		private static BansheeGz.BGDatabase.BGFieldFloat __Range;
		public static BansheeGz.BGDatabase.BGFieldFloat _Range
		{
			get
			{
				if(__Range==null || __Range.IsDeleted) __Range=(BansheeGz.BGDatabase.BGFieldFloat) MetaDefault.GetField(new BGId(5037380097773384370UL,11291849711367015327UL));
				return __Range;
			}
		}
		private static BansheeGz.BGDatabase.BGFieldFloat __Cooldown;
		public static BansheeGz.BGDatabase.BGFieldFloat _Cooldown
		{
			get
			{
				if(__Cooldown==null || __Cooldown.IsDeleted) __Cooldown=(BansheeGz.BGDatabase.BGFieldFloat) MetaDefault.GetField(new BGId(4634859534204638149UL,6637155625855446686UL));
				return __Cooldown;
			}
		}
		private static BansheeGz.BGDatabase.BGFieldInt __MaxAmmo;
		public static BansheeGz.BGDatabase.BGFieldInt _MaxAmmo
		{
			get
			{
				if(__MaxAmmo==null || __MaxAmmo.IsDeleted) __MaxAmmo=(BansheeGz.BGDatabase.BGFieldInt) MetaDefault.GetField(new BGId(5474773311939377067UL,7558555848424621997UL));
				return __MaxAmmo;
			}
		}
		private static readonly List<BGEntity> _tugjbyuhfv_reusableList = new List<BGEntity>();
		public List<Game.Data.DB_PlayerState> RelatedPlayerStateListUsingWeaponRelation
		{
			get
			{
				var _private_related_list = Alias_rifegrt_PlayerState._f_Weapon.GetRelatedIn(Entity.Id, _tugjbyuhfv_reusableList);
				if (_private_related_list.Count == 0) return null;
				var _private_result_list = new List<Game.Data.DB_PlayerState>(_private_related_list.Count);
				for (var i = 0; i < _private_related_list.Count; i++) _private_result_list.Add((Game.Data.DB_PlayerState) _private_related_list[i]);
				_tugjbyuhfv_reusableList.Clear();
				return _private_result_list;
			}
		}
		public List<Game.Data.DB_Character> RelatedCharacterListUsingWeaponRelation
		{
			get
			{
				var _private_related_list = Alias_rifegrt_Character._f_Weapon.GetRelatedIn(Entity.Id, _tugjbyuhfv_reusableList);
				if (_private_related_list.Count == 0) return null;
				var _private_result_list = new List<Game.Data.DB_Character>(_private_related_list.Count);
				for (var i = 0; i < _private_related_list.Count; i++) _private_result_list.Add((Game.Data.DB_Character) _private_related_list[i]);
				_tugjbyuhfv_reusableList.Clear();
				return _private_result_list;
			}
		}
	}
}
